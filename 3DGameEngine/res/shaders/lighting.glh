uniform vec3 C_eyePos;
uniform float specularIntensity;
uniform float specularPower;

struct BaseLight {
	vec3 color;
	float intensity;
};

// how fast the point light fades off
struct Attenuation {
	float constant;
	float linear;
	float exponent;
};

struct PointLight {
	BaseLight base;
	Attenuation atten;
	vec3 position;
	float range;
};

struct SpotLight {
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};

struct DirectionalLight {
	BaseLight base;
	vec3 direction;
};

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPos) {
	float diffuseFactor = dot(normal, -direction);
	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);
	if (diffuseFactor > 0) {
		diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
		
		vec3 directionToEye = normalize(C_eyePos - worldPos);
		vec3 reflectDirection = normalize(reflect(direction, normal));
		//vec3 halfDirection = normalize(directionToEye - direction); // Phong shader
		
		//float specularFactor = dot(halfDirection, normal); // Phong shader
		float specularFactor = dot(directionToEye, reflectDirection);
		specularFactor = pow(specularFactor, specularPower);
		
		if (specularFactor > 0) {
			specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
		}
	}
	
	return diffuseColor + specularColor;
}

vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 worldPos) {
	vec3 lightDirection = worldPos - pointLight.position;
	float distancToPoint = length(lightDirection);
	
	// optimization by range
	if (distancToPoint > pointLight.range) {
		return vec4(0, 0, 0, 0);
	}
	
	lightDirection = normalize(lightDirection);
	
	vec4 color = calcLight(pointLight.base, lightDirection, normal, worldPos);
	
	float attenuation = pointLight.atten.constant +
		pointLight.atten.linear * distancToPoint +
		pointLight.atten.exponent * distancToPoint * distancToPoint +
		0.0001; // avoid divide by zero, opengl sometimes calculate
		// both code routes no matter we add if...else or not
		
	
	return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPos) {
	 vec3 lightDirection = normalize(worldPos - spotLight.pointLight.position);
	 float spotFactor = dot(lightDirection, spotLight.direction);
	 vec4 color = vec4(0, 0, 0, 0);
	 
	 if (spotFactor > spotLight.cutoff) {
		color = calcPointLight(spotLight.pointLight, normal, worldPos) * 
				(1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
	 }
	 
	 return color;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPos) {
	return calcLight(directionalLight.base, -directionalLight.direction, normal, worldPos);
}
